include:
  - local: .gitlab/oscam-helper.yml

variables:
  FF_USE_FASTZIP: 1
  TRANSFER_METER_FREQUENCY: "2s"
  ARTIFACT_COMPRESSION_LEVEL: "default"
  CACHE_COMPRESSION_LEVEL: "default"
  CACHE_REQUEST_TIMEOUT: 5

stages:
  - fixup
  - build
  - test
  - new-version

info:
  stage: .pre
  tags:
    - build
  variables:
    GIT_STRATEGY: none
  rules:
    - if: $GITLAB_USER_NAME != 'pipeline-user'
  script:
    - !reference [.helper, runner-info]
  allow_failure: true

setup:
  stage: .pre
  tags:
    - build
  variables:
    GIT_STRATEGY: none
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && $SETUP_BUILD_ENV == 'True'
    - if: $CI_PIPELINE_SOURCE == 'schedule' && $SETUP_BUILD_ENV == 'True'
  script:
    - !reference [.helper, runner-setup]
  allow_failure: true

oscam-build-native:
  stage: build
  tags:
    - build
  variables:
    ARCH: "native"
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_PIPELINE_SOURCE == 'schedule'
  script:
    - !reference [.helper, custom-checkout]
    - !reference [.helper, oscam-build]
  artifacts:
    when: always
    paths:
      - build/${ARCH}/oscam-make-${ARCH}
      - build/${ARCH}/oscam-make-${ARCH}.log
      - build/${ARCH}/oscam-cmake-${ARCH}
      - build/${ARCH}/oscam-cmake-${ARCH}.log
    expire_in: 1 week
  allow_failure: true

oscam-build-aarch64:
  stage: build
  tags:
    - build
  variables:
    ARCH: "aarch64"
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && $CROSS_BUILD_ARCH =~ /aarch64/
    - if: $CI_PIPELINE_SOURCE == 'schedule' && $CROSS_BUILD_ARCH =~ /aarch64/
  script:
    - !reference [.helper, custom-checkout]
    - !reference [.helper, oscam-build]
  artifacts:
    when: always
    paths:
      - build/${ARCH}/oscam-make-${ARCH}
      - build/${ARCH}/oscam-make-${ARCH}.log
      - build/${ARCH}/oscam-cmake-${ARCH}
      - build/${ARCH}/oscam-cmake-${ARCH}.log
    expire_in: 1 week
  allow_failure: true

oscam-build-armv7:
  stage: build
  tags:
    - build
  variables:
    ARCH: "armv7"
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && $CROSS_BUILD_ARCH =~ /armv7/
    - if: $CI_PIPELINE_SOURCE == 'schedule' && $CROSS_BUILD_ARCH =~ /armv7/
  script:
    - !reference [.helper, custom-checkout]
    - !reference [.helper, oscam-build]
  artifacts:
    when: always
    paths:
      - build/${ARCH}/oscam-make-${ARCH}
      - build/${ARCH}/oscam-make-${ARCH}.log
      - build/${ARCH}/oscam-cmake-${ARCH}
      - build/${ARCH}/oscam-cmake-${ARCH}.log
    expire_in: 1 week
  allow_failure: true

oscam-build-mips32el:
  stage: build
  tags:
    - build
  variables:
    ARCH: "mips32el"
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && $CROSS_BUILD_ARCH =~ /mips32el/
    - if: $CI_PIPELINE_SOURCE == 'schedule' && $CROSS_BUILD_ARCH =~ /mips32el/
  script:
    - !reference [.helper, custom-checkout]
    - !reference [.helper, oscam-build]
  artifacts:
    when: always
    paths:
      - build/${ARCH}/oscam-make-${ARCH}
      - build/${ARCH}/oscam-make-${ARCH}.log
      - build/${ARCH}/oscam-cmake-${ARCH}
      - build/${ARCH}/oscam-cmake-${ARCH}.log
    expire_in: 1 week
  allow_failure: true

oscam-build-powerpc:
  stage: build
  tags:
    - build
  variables:
    ARCH: "powerpc"
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && $CROSS_BUILD_ARCH =~ /powerpc/
    - if: $CI_PIPELINE_SOURCE == 'schedule' && $CROSS_BUILD_ARCH =~ /powerpc/
  script:
    - !reference [.helper, custom-checkout]
    - !reference [.helper, oscam-build]
  artifacts:
    when: always
    paths:
      - build/${ARCH}/oscam-make-${ARCH}
      - build/${ARCH}/oscam-make-${ARCH}.log
      - build/${ARCH}/oscam-cmake-${ARCH}
      - build/${ARCH}/oscam-cmake-${ARCH}.log
    expire_in: 1 week
  allow_failure: true

oscam-build-sh4:
  stage: build
  tags:
    - build
  variables:
    ARCH: "sh4"
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && $CROSS_BUILD_ARCH =~ /sh4/
    - if: $CI_PIPELINE_SOURCE == 'schedule' && $CROSS_BUILD_ARCH =~ /sh4/
  script:
    - !reference [.helper, custom-checkout]
    - !reference [.helper, oscam-build]
  artifacts:
    when: always
    paths:
      - build/${ARCH}/oscam-make-${ARCH}
      - build/${ARCH}/oscam-make-${ARCH}.log
      - build/${ARCH}/oscam-cmake-${ARCH}
      - build/${ARCH}/oscam-cmake-${ARCH}.log
    expire_in: 1 week
  allow_failure: true

oscam-make-test:
  stage: test
  tags:
    - test
  needs: [oscam-build-native]
  variables:
    GIT_STRATEGY: none
    OSCAM_BUILD: "make"
    ARCH: "native"
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_PIPELINE_SOURCE == 'schedule'
  script:
    - !reference [.helper, oscam-startup-test]
  artifacts:
    when: always
    paths:
      - build/${ARCH}/oscam-${OSCAM_BUILD}-${ARCH}-test.log
    expire_in: 1 week
  allow_failure: true

oscam-cmake-test:
  stage: test
  tags:
    - test
  needs: [oscam-build-native]
  variables:
    GIT_STRATEGY: none
    OSCAM_BUILD: "cmake"
    ARCH: "native"
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_PIPELINE_SOURCE == 'schedule'
  script:
    - !reference [.helper, oscam-startup-test]
  allow_failure: true
  artifacts:
    when: always
    paths:
      - build/${ARCH}/oscam-${OSCAM_BUILD}-${ARCH}-test.log
    expire_in: 1 week

code-cleanup:
  stage: fixup
  tags:
    - clean
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && $GITLAB_USER_NAME != 'pipeline-user'
    - if: $CI_PIPELINE_SOURCE == 'schedule' && $GITLAB_USER_NAME != 'pipeline-user'
  dependencies: []
  script:
    - !reference [.helper, fix-whitespaces]
  allow_failure: true

auto-version:
  stage: new-version
  tags:
    - version
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $GITLAB_USER_NAME != 'pipeline-user'
  script:
    - !reference [.helper, tag-version]
  allow_failure: false
